#!/usr/bin/env python
import random
from characters import Player, DoctorValentin, Ghost
from hallucination_system import HallucinationSystem


class GameLogic:
    """Класс для управления игровой логикой и сюжетом хоррор-новеллы"""

    def __init__ (self):
        # Создаем персонажей
        from styles import MessageStyles
        self.styles = MessageStyles ()  # Добавляем экземпляр MessageStyles
        self.player = Player ()
        self.doctor = DoctorValentin ()
        self.wife_ghost = Ghost (
            name="Призрак жены",
            age=34,
            description="Призрачная фигура женщины, окутанная печалью",
            ghost_type="family"
        )
        self.child_ghost = Ghost (
            name="Призрак ребёнка",
            age=7,
            description="Тень ребёнка, блуждающая по дому",
            ghost_type="family"
        )
        # Инициализация системы галлюцинаций
        self.hallucination_system = HallucinationSystem (self)

        # Инициализация отношений между персонажами
        self.player.add_relationship ("Доктор Валентин", "доктор", -10)
        self.doctor.add_relationship ("Алексей", "пациент", 20)

        # Счетчик найденных предметов для секретной концовки
        self.found_photos = 0
        self.max_photos = 5

        # Сцены игры и их обработчики
        self.scenes = {
            'intro': self._handle_intro,
            'room_with_portrait': self._handle_room_with_portrait,
            'corridor': self._handle_corridor,
            'children_room': self._handle_children_room,
            'basement': self._handle_basement,
            'library': self._handle_library,
            'doctor_office': self._handle_doctor_office,
            'final_choice': self._handle_final_choice,
            'end_acceptance': self._handle_end_acceptance,
            'end_denial': self._handle_end_denial,
            'end_secret': self._handle_end_secret,
            'end': self._handle_end,
        }

        # Ключевые слова для анализа ответов игрока
        self.keywords = {
            'brave': ['исследовать', 'продолжить', 'вперёд', 'открыть', 'читать', 'смотреть', 'да', 'хочу'],
            'scared': ['страшно', 'боюсь', 'назад', 'вернуться', 'выйти', 'убежать', 'нет', 'не хочу'],
            'curious': ['что', 'почему', 'как', 'где', 'когда', 'узнать', 'правда', 'память', 'искать'],
            'aggressive': ['удар', 'сломать', 'разбить', 'драться', 'уничтожить', 'выбить', 'напасть'],
        }

    def get_introduction (self):
        """Вступительный текст при начале игры"""
        return (
            "Тусклый свет. Звук дождя за окном. Алексей медленно открывает глаза в незнакомой комнате старого особняка. "
            "Голова раскалывается. Он не помнит, как здесь оказался.\n\n"
            "Внутренний голос: Иногда воспоминания — самое страшное, что может быть у человека. "
            "Особенно те, которые мы так отчаянно пытаемся забыть."
        )

    def get_options_for_scene (self, scene):
        """Возвращает варианты ответов для текущей сцены"""
        options_map = {
            'intro': [
                "Осмотреться вокруг",
                "Попытаться вспомнить, как я сюда попал",
                "Позвать кого-нибудь"
            ],
            'room_with_portrait': [
                "Осмотреть портрет внимательнее",
                "Проверить ящик письменного стола",
                "Попытаться открыть дверь"
            ],
            'corridor': [
                "Идти по коридору дальше",
                "Прислушаться к звукам за дверями",
                "Вернуться в начальную комнату"
            ],
            'children_room': [
                "Осмотреть музыкальную шкатулку",
                "Прочитать дневник на столе",
                "Заглянуть в шкаф"
            ],
            'basement': [
                "Исследовать алтарь в центре комнаты",
                "Осмотреть странные банки на полках",
                "Быстро уйти отсюда"
            ],
            'library': [
                "Искать книги с информацией о доме",
                "Изучить вырванные страницы",
                "Проверить новую дверь в конце комнаты"
            ],
            'doctor_office': [
                "Прочитать записи о пациентах",
                "Осмотреть странное кресло в центре комнаты",
                "Искать выход из дома"
            ],
            'final_choice': [
                "Сесть в кресло и вспомнить правду",
                "Отказаться и попытаться покинуть дом"
            ],
            'end_acceptance': [
                "Принять правду и двигаться дальше",
                "Попросить прощения у призраков семьи"
            ],
            'end_denial': [
                "Продолжать отрицать произошедшее",
                "Попытаться снова забыть всё"
            ],
            'end_secret': [
                "Противостоять доктору Валентину",
                "Помочь душам обрести покой"
            ],
            'end': [
                "Начать игру заново"
            ]
        }
        options = options_map.get (scene, ["Продолжить", "Вернуться", "Закончить игру"])
        # Добавляем ложные варианты при высоком уровне страха
        if hasattr (self, 'player') and hasattr (self.player, 'fear_level'):
            options = self.hallucination_system.add_false_options (options, scene)

        return options



    def process_input (self, scene, user_input):
        """Обработка ввода пользователя для текущей сцены"""
        # Проверяем, существует ли обработчик для текущей сцены
        if scene in self.scenes:
            # Вызываем обработчик и получаем ответ и следующую сцену
            return self.scenes[scene] (user_input)
        else:
            # Для неизвестных сцен возвращаем общий ответ
            return "Что-то пошло не так...", "end"

    def process_option_selection (self, scene, option_index):
        """
        Обработка выбора варианта ответа

        Args:
            scene: Текущая сцена
            option_index: Индекс выбранного варианта

        Returns:
            tuple: (ответ, следующая сцена)
        """
        # Получаем варианты ответов для текущей сцены
        options = self.get_options_for_scene (scene)

        # Проверяем, что индекс в допустимых пределах
        if 0 <= option_index < len (options):
            # Используем выбранный вариант как ввод пользователя
            user_input = options[option_index]

            # Проверяем, не является ли это ложным вариантом (галлюцинацией)
            for false_options in self.hallucination_system.false_options.values ():
                if user_input in false_options:
                    # Это галлюцинация - обрабатываем специальным образом
                    self.player.increase_fear (10)  # Увеличиваем страх при выборе ложного варианта

                    hallucination_response = (
                        f"Алексей пытается {user_input.lower ()}, но ничего не происходит. "
                        f"Это была лишь галлюцинация, порождение его страха. Уровень тревоги растет.\n\n"
                        f"Внутренний голос: Я начинаю терять связь с реальностью. Нужно успокоиться."
                    )

                    # Возвращаем ту же сцену, чтобы игрок мог выбрать реальный вариант
                    return hallucination_response, scene

            # Если это не галлюцинация, обрабатываем обычным образом
            response, next_scene = self.process_input (scene, user_input)

            # Применяем эффекты галлюцинаций к ответу
            if hasattr (self, 'player') and hasattr (self.player, 'fear_level'):
                response = self.hallucination_system.apply_hallucination_effects (response, scene)

            return response, next_scene
        else:
            return "Произошла ошибка с выбором варианта.", scene

    def _analyze_sentiment (self, text):
        """Анализ настроения текста пользователя"""
        text = text.lower ()

        # Проверяем наличие ключевых слов разных типов
        for sentiment, words in self.keywords.items ():
            for word in words:
                if word in text:
                    return sentiment

        # По умолчанию считаем настроение нейтральным
        return 'neutral'

    def _handle_photo_discovery (self):
        """Обработка нахождения фотографии для секретной концовки"""
        self.found_photos += 1

        discovery_text = (
            "Среди вещей вы находите старую семейную фотографию. На ней Алексей, улыбающаяся женщина и маленький ребёнок. "
            f"Вы нашли {self.found_photos} из {self.max_photos} фотографий.\n\n"
        )

        # Добавляем флаг, если нашли все фотографии
        if self.found_photos >= self.max_photos:
            self.player.add_flag ('all_photos_found')
            return discovery_text + "В вашей голове что-то щёлкает, словно последний кусочек пазла встал на место. Вы начинаете вспоминать..."

        return discovery_text

    def _update_fear_level (self, sentiment, location):
        """Обновление уровня страха на основе настроения и локации"""
        # Базовые изменения страха в зависимости от сентимента
        if sentiment == 'brave':
            self.player.decrease_fear (5)
        elif sentiment == 'scared':
            self.player.increase_fear (10)
        elif sentiment == 'aggressive':
            self.player.increase_fear (15)

        # Дополнительно увеличиваем страх в зависимости от локации
        if location == 'basement':
            self.player.increase_fear (15)
        elif location == 'children_room':
            self.player.increase_fear (10)
        elif location == 'corridor':
            self.player.increase_fear (5)
        elif location == 'doctor_office':
            self.player.increase_fear (20)

    def _handle_intro (self, user_input):
        """Обработка вступительной сцены"""
        sentiment = self._analyze_sentiment (user_input)

        if "осмотреться" in user_input.lower ():
            response = (
                "Алексей оглядывается. Комната выглядит старомодно: потертые обои, массивная антикварная мебель, "
                "пыльная люстра. На стене висит портрет женщины с вырезанными глазами. В углу стоит письменный "
                "стол с закрытым ящиком. Единственная дверь из комнаты заперта.\n\n"
                "Внутренний голос: Что это за место? Почему я здесь?"
            )
            return response, 'room_with_portrait'

        elif "вспомнить" in user_input.lower ():
            response = (
                "Алексей пытается вспомнить, как он здесь оказался. В голове туман, обрывки образов. "
                "Последнее, что он помнит — кабинет врача, яркий свет лампы, чей-то голос, говорящий о лечении... "
                "А затем пустота.\n\n"
                "Внутренний голос: Кто-то хотел, чтобы я забыл. Но что именно?"
            )
            return response, 'room_with_portrait'

        else:  # "позвать"
            response = (
                "Алексей кричит, зовёт на помощь, но в ответ лишь эхо его собственного голоса. "
                "Дом кажется заброшенным и пустым. Но на мгновение ему чудится тихий детский смех где-то вдалеке.\n\n"
                "Внутренний голос: Я не один здесь. Кто-то наблюдает..."
            )
            return response, 'room_with_portrait'

    def _handle_room_with_portrait (self, user_input):
        """Обработка сцены в комнате с портретом"""
        sentiment = self._analyze_sentiment (user_input)
        self._update_fear_level (sentiment, 'room')

        # Случайный шанс найти фотографию при осмотре комнаты
        random_discovery = random.random () < 0.3  # 30% шанс

        if "портрет" in user_input.lower ():
            response = (
                "Алексей подходит ближе к портрету. Женщина на нём кажется смутно знакомой. "
                "Кто-то аккуратно вырезал глаза на портрете, словно не хотел, чтобы она смотрела на мир. "
                "Прикоснувшись к раме, Алексей слышит тихий шепот: 'Помнишь меня?'\n\n"
            )

            if random_discovery:
                response += self._handle_photo_discovery ()

            response += "За спиной Алексея что-то падает. Обернувшись, он видит ключ на полу, которого раньше там не было."

            # Добавляем ключ в инвентарь
            self.player.add_to_inventory ("ключ")
            return response, 'room_with_portrait'

        elif "ящик" in user_input.lower ():
            if not self.player.has_item ("ключ"):
                response = (
                    "Ящик письменного стола заперт. Нужен ключ, чтобы открыть его."
                )
                return response, 'room_with_portrait'
            else:
                response = (
                    "Алексей открывает ящик стола найденным ключом. Внутри лежит старый дневник. "
                    "На первой странице надпись: 'Дневник доктора Валентина. Эксперимент №174: Алексей Н.'\n\n"
                    "Пролистав несколько страниц, Алексей находит запись: 'Пациент продолжает видеть кошмары. "
                    "Стандартная терапия неэффективна. Начинаем экспериментальный протокол по стиранию травматических воспоминаний.'"
                )

                # Добавляем запись в дневник как предмет
                self.player.add_to_inventory ("страница дневника")
                return response, 'room_with_portrait'

        else:  # "дверь"
            if not self.player.has_item ("ключ"):
                response = (
                    "Дверь заперта. Алексей дергает ручку, но безрезультатно."
                )
                return response, 'room_with_portrait'
            else:
                response = (
                    "Алексей использует найденный ключ, и дверь со скрипом открывается. "
                    "За ней длинный тёмный коридор с множеством дверей. При приближении к каждой двери "
                    "слышатся странные звуки: детский смех, плач, крики.\n\n"
                    "На стене кровью написано: 'Каждая дверь — это воспоминание. Некоторые лучше держать закрытыми.'"
                )
                return response, 'corridor'

    def _handle_corridor (self, user_input):
        """Обработка сцены в коридоре"""
        sentiment = self._analyze_sentiment (user_input)
        self._update_fear_level (sentiment, 'corridor')

        if "дальше" in user_input.lower () or "идти" in user_input.lower ():
            # Чем выше уровень страха, тем более жуткие явления
            if self.player.fear_level > 50:
                response = (
                    "Пока Алексей идёт по коридору, свет начинает мигать всё быстрее. Из-за дверей доносятся крики. "
                    "На мгновение ему кажется, что стены кровоточат. В конце коридора он замечает силуэт ребёнка, "
                    "который исчезает за поворотом.\n\n"
                    "Алексей следует за призраком и оказывается перед дверью в детскую комнату."
                )
            else:
                response = (
                    "Алексей осторожно идёт по коридору. Половицы скрипят под ногами. В конце коридора мелькает "
                    "маленькая фигура и исчезает за дверью. Подойдя ближе, Алексей видит детскую комнату.\n\n"
                    "Дверь медленно открывается, словно приглашая войти."
                )

            return response, 'children_room'

        elif "прислушаться" in user_input.lower () or "звук" in user_input.lower ():
            response = (
                "Алексей прижимается ухом к одной из дверей. Сначала он слышит лишь тишину, а затем"
                "тихий женский голос начинает что-то напевать — колыбельную. Внезапно напевание прерывается "
                "криком, и за дверью слышится звук разбивающегося стекла и треск огня.\n\n"
                "Когда Алексей отшатывается от двери, он замечает, что дальше по коридору появилась новая лестница, "
                "ведущая вниз, в темноту."
            )

            # Шанс найти фотографию
            if random.random () < 0.4:  # 40% шанс
                response += "\n\n" + self._handle_photo_discovery ()

            return response, 'basement'

        else:  # "вернуться"
            response = (
                "Алексей решает вернуться в начальную комнату, но когда он оборачивается, коридор выглядит иначе. "
                "Он уверен, что шёл прямо, но теперь перед ним развилка, которой раньше не было. Справа снова слышится "
                "детский смех и виднеется открытая дверь в ярко освещённую детскую комнату. Слева — тёмная лестница, "
                "ведущая в подвал, откуда доносится странный гул.\n\n"
                "Куда бы Алексей ни пошёл, назад пути уже нет."
            )

            # Игрок теперь может выбрать между детской комнатой и подвалом
            options = self.get_options_for_scene ('corridor')
            options[0] = "Пойти в детскую комнату"
            options[1] = "Спуститься в подвал"

            # Изменим флаг, чтобы этот выбор вел к соответствующим локациям
            self.player.add_flag ('at_crossroads')

            return response, 'corridor'

    def _handle_children_room (self, user_input):
        """Обработка сцены в детской комнате"""
        sentiment = self._analyze_sentiment (user_input)
        self._update_fear_level (sentiment, 'children_room')

        if "шкатулк" in user_input.lower ():
            response = (
                "Алексей берёт в руки старую музыкальную шкатулку. Как только он открывает её, начинает "
                "играть нежная колыбельная. Внутри шкатулки фотография — молодая пара с ребёнком. Мужчина на фото — "
                "Алексей, и он выглядит счастливым. Женщина и ребёнок ему смутно знакомы, но он не может вспомнить их имена.\n\n"
                "Пока играет музыка, температура в комнате заметно падает. В зеркале на мгновение отражается "
                "маленький мальчик, стоящий за спиной Алексея, но когда он оборачивается, никого нет."
            )

            # Добавляем фото в инвентарь и как найденное для секретной концовки
            self.player.add_to_inventory ("семейное фото")
            self.found_photos += 1

            return response, 'children_room'

        elif "дневник" in user_input.lower ():
            response = (
                "Алексей открывает дневник, лежащий на столе. Это детский дневник, исписанный неровным почерком. "
                "Последние записи датированы тремя годами ранее:\n\n"
                "'Мама говорит, что я болею. Мне снятся кошмары. Папа обещал, что скоро всё будет хорошо.'\n\n"
                "'Сегодня папа плакал, когда думал, что я сплю. Я боюсь.'\n\n"
                "'Доктор сказал, что я должен быть сильным. Но я так устал...'\n\n"
                "Последняя запись обрывается. На запотевшем зеркале напротив появляется надпись: 'Ты бросил меня'."
            )

            # Есть шанс найти фотографию
            if random.random () < 0.5:  # 50% шанс
                response += "\n\n" + self._handle_photo_discovery ()

            return response, 'children_room'

        else:  # "шкаф"
            response = (
                "Алексей подходит к шкафу, который периодически скрипит и приоткрывается сам по себе. Собравшись с духом, "
                "он резко распахивает дверцы. Внутри детская одежда, игрушки, а на нижней полке — ещё одна музыкальная "
                "шкатулка, более старая.\n\n"
                "Открыв её, Алексей находит ключ с надписью 'Библиотека', а также фрагмент газетной вырезки: "
                "'Трагический пожар унёс жизни женщины и ребёнка. Предполагается, что причиной возгорания стала неисправность проводки...'"
            )

            # Добавляем ключ от библиотеки в инвентарь
            self.player.add_to_inventory ("ключ от библиотеки")

            # Обновляем страх и отношения в зависимости от находки
            self.player.increase_fear (10)

            # Предлагаем следующее направление
            response += "\n\nИз детской комнаты ведут две двери: одна обратно в коридор, другая — неизвестно куда."
            return response, 'corridor'

    def _handle_basement (self, user_input):
        """Обработка сцены в подвале"""
        sentiment = self._analyze_sentiment (user_input)
        self._update_fear_level (sentiment, 'basement')

        if "алтарь" in user_input.lower ():
            response = (
                "Алексей осторожно подходит к странному алтарю в центре подвала. На нём разложены фотографии разных людей, "
                "некоторые из них зачёркнуты красным. Среди них Алексей находит своё фото с надписью '#174' и пометкой 'В процессе'.\n\n"
                "Рядом с алтарём лежит раскрытая книга, подписанная 'Журнал эксперимента'. В ней описывается процедура "
                "избирательного стирания памяти: 'Субъект погружается в созданное сознанием пространство, где взаимодействует "
                "с проекциями своих воспоминаний. Успешное завершение — принятие ситуации и интеграция травмирующего опыта.'"
            )

            # Добавляем журнал как предмет и повышаем шанс секретной концовки
            self.player.add_to_inventory ("журнал эксперимента")

            # Есть шанс найти фотографию
            if random.random () < 0.3:  # 30% шанс
                response += "\n\n" + self._handle_photo_discovery ()

            response += "\n\nСреди бумаг Алексей находит ключ с надписью 'Библиотека'."
            self.player.add_to_inventory ("ключ от библиотеки")

            return response, 'basement'

        elif "банки" in user_input.lower ():
            response = (
                "На полках расставлены десятки стеклянных банок с мутной жидкостью. В некоторых плавают непонятные органические объекты. "
                "Одна из банок привлекает внимание — внутри нее словно пульсирует свет. На этикетке написано 'А.Н. - воспоминания о пожаре'.\n\n"
                "Когда Алексей прикасается к банке, его захлестывают образы: огонь, крики женщины и ребёнка, его собственные руки в ожогах, "
                "попытки выбить запертую дверь...\n\n"
                "Банка выскальзывает из рук и разбивается. Содержимое растекается по полу, образуя слова: 'Библиотека знает правду'."
            )

            # Увеличиваем страх сильнее
            self.player.increase_fear (20)

            return response, 'basement'

        else:  # "уйти"
            response = (
                "Алексей решает как можно быстрее покинуть жуткий подвал. Поднимаясь по лестнице, он слышит за спиной "
                "тяжелое дыхание, словно кто-то следует за ним. Обернувшись, он никого не видит, но в темноте мелькают "
                "два светящихся глаза.\n\n"
                "Выбежав в коридор, Алексей замечает новую дверь с табличкой 'Библиотека'."
            )

            return response, 'library'

    def _handle_library (self, user_input):
        """Обработка сцены в библиотеке"""
        sentiment = self._analyze_sentiment (user_input)
        self._update_fear_level (sentiment, 'library')

        # Требуется ключ для входа в библиотеку
        if not self.player.has_item ("ключ от библиотеки"):
            response = (
                "Дверь в библиотеку заперта. На ней висит старинный замок с надписью 'Знание опасно'."
            )
            return response, 'corridor'

        if "книги" in user_input.lower () or "информация" in user_input.lower ():
            response = (
                "Алексей начинает искать информацию среди книжных полок. Многие книги повреждены, страницы вырваны. "
                "Наконец, он находит книгу 'История психиатрической больницы «Новая заря»'. В ней рассказывается о скандале, "
                "связанном с экспериментальными методами лечения.\n\n"
                "'Доктор Валентин проводил неэтичные эксперименты по стиранию травматических воспоминаний. Большинство пациентов "
                "не пережили процедуру. Те, кто выжил, говорили о странных побочных эффектах — забытые воспоминания не исчезали, "
                "а трансформировались в кошмарные видения, преследующие их.'\n\n"
                "В книге Алексей находит фотографию здания больницы — это тот самый дом, где он сейчас находится."
            )

            # Добавляем книгу в инвентарь
            self.player.add_to_inventory ("книга об истории больницы")

            # Есть шанс найти фотографию
            if random.random () < 0.4:  # 40% шанс
                response += "\n\n" + self._handle_photo_discovery ()

            return response, 'library'

        elif "страницы" in user_input.lower () or "изучить" in user_input.lower ():
            response = (
                "Алексей собирает разрозненные страницы, разбросанные по библиотеке. Складывая их вместе, он "
                "восстанавливает историю:\n\n"
                "'Психиатрическая больница «Новая заря» была закрыта после скандала с экспериментальными методами лечения. "
                "Доктор Валентин проводил опыты по стиранию травматических воспоминаний. Большинство пациентов не пережили эксперименты. "
                "Те, кто выжил, утверждали, что забытые воспоминания не исчезают, а превращаются в нечто более страшное...'\n\n"
                "'Пациент №174, Алексей Н., потерял семью в пожаре. Чувство вины привело к серьёзным психологическим проблемам. "
                "Добровольно согласился на экспериментальное лечение...'"
            )

            # Последняя страница может дать подсказку к секретной концовке
            if self.found_photos >= 3:
                response += "\n\nНа последней странице Алексей находит важную деталь: 'В ходе расследования пожара было выявлено, что "
                "доктор Валентин манипулировал показаниями свидетелей. Экспертиза установила, что возгорание произошло из-за неисправности электропроводки, "
                "а не по вине хозяина дома. Однако информация была скрыта, и пациент продолжал страдать от необоснованного чувства вины...'"

                # Добавляем важный флаг для секретной концовки
                self.player.add_flag ('knows_about_manipulation')

            # Когда история собрана, все двери библиотеки захлопываются
            response += "\n\nКогда Алексей складывает последние страницы, все двери библиотеки с грохотом захлопываются. "
            "Книги начинают падать с полок. В противоположном конце комнаты появляется дверь, которой раньше не было. "
            "На ней табличка: 'Кабинет доктора'."

            return response, 'library'

        else:  # "дверь" или проверить новую дверь
            response = (
                "Алексей подходит к двери, которая внезапно появилась в конце библиотеки. Она выглядит новее, чем остальные "
                "двери в доме. На ней висит табличка 'Кабинет доктора'.\n\n"
                "Когда Алексей берётся за ручку, со всех полок начинают падать книги, словно невидимая сила пытается "
                "не дать ему пройти дальше. Через несколько секунд хаос прекращается, и дверь сама медленно открывается."
            )

            # Переходим в кабинет доктора, но только если у игрока достаточно информации
            if self.player.has_item ("книга об истории больницы") or self.player.has_item ("журнал эксперимента"):
                return response, 'doctor_office'
            else:
                # Если у игрока недостаточно информации, намекаем, что нужно исследовать библиотеку
                response += "\n\nНо за дверью лишь пустота. Похоже, Алексею нужно узнать больше об этом месте, прежде чем двигаться дальше."
                return response, 'library'

    def _handle_doctor_office (self, user_input):
        """Обработка сцены в кабинете доктора"""
        sentiment = self._analyze_sentiment (user_input)
        self._update_fear_level (sentiment, 'doctor_office')

        if "записи" in user_input.lower () or "пациент" in user_input.lower ():
            response = (
                "Алексей просматривает медицинские записи на столе. Большинство из них посвящены экспериментам по стиранию памяти. "
                "Он находит свою карту:\n\n"
                "ЗАПИСЬ ПАЦИЕНТА № 174:\n"
                "Алексей Н., 35 лет. Обратился добровольно после трагической гибели семьи. Сильное чувство вины. "
                "Навязчивые кошмары и галлюцинации. Согласился на экспериментальное лечение методом глубокого погружения "
                "в подсознание и избирательного стирания воспоминаний.\n\n"
                "ПРОТОКОЛ ЛЕЧЕНИЯ:\n"
                "1. Индукция искусственного сна\n"
                "2. Погружение в виртуальную реальность, созданную подсознанием\n"
                "3. Взаимодействие с проекциями травматических воспоминаний\n"
                "4. Принятие или отрицание произошедшего (на выбор пациента)\n\n"
                "ВНИМАНИЕ: На этапе 4 критически важен выбор пациента. Отрицание ведёт к замкнутому циклу и повторному погружению."
            )

            # Добавляем запись в инвентарь
            self.player.add_to_inventory ("медицинская карта")

            return response, 'doctor_office'

        elif "кресло" in user_input.lower ():
            response = (
                "В центре кабинета стоит странное медицинское кресло с ремнями и шлемом, подсоединённым к аппаратуре. "
                "Рядом с креслом монитор, на котором мигает надпись: 'Текущий сеанс: Пациент №174, фаза принятия решения'.\n\n"
                "На подлокотнике кресла Алексей видит кнопку с надписью 'Завершить сеанс'. Внутренний голос подсказывает, "
                "что сидя в этом кресле, он может вспомнить всё и выйти из кошмара.\n\n"
                "Но в тот момент, когда Алексей приближается к креслу, в дальнем углу кабинета появляется призрачная фигура "
                "доктора Валентина, который предостерегающе поднимает руку: 'Подумайте хорошенько, Алексей. Некоторые воспоминания "
                "слишком болезненны. Вы сами просили забыть их. Может быть, лучше оставить всё как есть?'"
            )

            return response, 'final_choice'

        else:  # "выход"
            response = (
                "Алексей ищет выход из кабинета, но все двери кроме входной исчезли. Когда он пытается вернуться в библиотеку, "
                "дверь не открывается. Окна в кабинете закрашены белой краской.\n\n"
                "Внезапно свет начинает мигать, и в зеркале на стене вместо своего отражения Алексей видит двух призраков — "
                "женщину и ребёнка, которые смотрят на него с немым вопросом.\n\n"
                "Рядом с креслом в центре комнаты появляется полупрозрачная фигура доктора Валентина: 'Вы зашли слишком далеко, "
                "Алексей. Теперь вам придётся сделать выбор. Либо вспомнить всё и принять правду, либо отрицать её и остаться "
                "здесь навсегда.'"
            )

            return response, 'final_choice'

    def _handle_final_choice (self, user_input):
        """Обработка сцены финального выбора"""
        # Здесь мы определяем, к какой концовке придёт игрок

        if "кресло" in user_input.lower () or "вспомнить" in user_input.lower () or "правду" in user_input.lower ():
            # Игрок выбирает вспомнить правду

            # Проверяем, доступна ли секретная концовка
            if self.found_photos >= self.max_photos or self.player.has_flag ('knows_about_manipulation'):
                response = (
                    "Алексей решительно садится в кресло. Когда он надевает шлем, перед глазами проносятся яркие вспышки воспоминаний: "
                    "счастливые моменты с семьёй, смех ребёнка, улыбка жены...\n\n"
                    "А затем огонь. Ночь пожара. Алексей просыпается от запаха дыма, пытается добраться до комнаты сына, но путь "
                    "преграждает огонь. Он пытается прорваться, получает сильные ожоги, теряет сознание...\n\n"
                    "Но в этот момент появляется ещё одно воспоминание — о встрече с доктором Валентином до пожара. Доктор предлагал "
                    "экспериментальное лечение для его сына, но Алексей отказался. Затем следует сцена, где доктор проникает в их дом "
                    "и устраивает короткое замыкание...\n\n"
                    "Алексей понимает, что доктор Валентин использовал его чувство вины для своих экспериментов. Правда в том, что "
                    "Алексей пытался спасти семью и получил сильные ожоги, но не смог их вытащить. Доктор манипулировал его воспоминаниями, "
                    "чтобы усилить чувство вины."
                )
                return response, 'end_secret'
            else:
                response = (
                    "Алексей садится в кресло и надевает шлем. Вспышки воспоминаний проносятся перед глазами: счастливые моменты с семьёй, "
                    "а затем роковая ночь пожара.\n\n"
                    "Он видит правду: из-за его небрежности в доме случился пожар, в котором погибли его жена и ребенок. "
                    "Он не проверил электропроводку, хотя жена неоднократно просила его об этом. Он не смог с этим смириться и "
                    "обратился к доктору Валентину, чтобы забыть.\n\n"
                    "Дом начинает рушиться вокруг него. Появляются призрачные фигуры жены и ребенка, которые протягивают к нему руки."
                )
                return response, 'end_acceptance'

        else:  # "отказаться" или попытаться покинуть дом
            response = (
                "Алексей отказывается от кресла и поворачивается к выходу. Он не хочет вспоминать. Не хочет знать правду. "
                "Дверь в кабинет внезапно распахивается, и Алексей бежит прочь.\n\n"
                "Но куда бы он ни бежал, каждая дверь открывается в одну и ту же комнату — детскую комнату в ночь пожара. "
                "Он видит себя, спящего в кресле перед телевизором, пока в детской начинается пожар от неисправной проводки.\n\n"
                "Сцена повторяется снова и снова, и Алексей понимает, что обречен переживать свою травму вечно."
            )
            return response, 'end_denial'

    def _handle_end_acceptance (self, user_input):
        """Обработка хорошей концовки - принятие правды"""
        if "принять" in user_input.lower ():
            response = (
                "Алексей: Я помню. И я больше не убегу от правды.\n\n"
                "Он принимает свою вину. Образы вокруг начинают рассеиваться, дом исчезает, и Алексей просыпается "
                "в настоящей психиатрической больнице. Рядом сидит пожилой доктор, совсем не похожий на зловещего "
                "доктора Валентина из его кошмара.\n\n"
                "Доктор: С возвращением, Алексей. Как вы себя чувствуете?\n\n"
                "Алексей понимает, что кошмарное путешествие было создано его собственным разумом, чтобы помочь "
                "принять трагедию и начать настоящее исцеление.\n\n"
                "ХОРОШАЯ КОНЦОВКА: Принятие и исцеление."
            )
        else:  # "прощение"
            response = (
                "Алексей поворачивается к призракам своей семьи: Простите меня. Я виноват перед вами, но я не могу "
                "изменить прошлое. Я могу только научиться жить с этой болью.\n\n"
                "Призраки подходят ближе. Жена касается его щеки, словно утирая слезу. Ребёнок обнимает его. "
                "Они начинают светиться мягким, тёплым светом и медленно растворяются.\n\n"
                "Алексей просыпается в больничной палате. Он плачет, но это слёзы очищения. На тумбочке стоит "
                "фотография его семьи. Он больше не отворачивается от неё.\n\n"
                "ХОРОШАЯ КОНЦОВКА: Примирение с прошлым."
            )

        return response, 'end'

    def _handle_end_denial (self, user_input):
        """Обработка плохой концовки - отрицание"""
        response = (
            "Алексей мечется по бесконечным коридорам дома, пытаясь найти выход. Но каждая дверь ведёт в прошлое, "
            "в момент трагедии.\n\n"
            "Алексей (кричит): Нет! Я не хочу помнить! Это неправда!\n\n"
            "Призрак доктора Валентина появляется в конце коридора: 'Вы сами выбрали этот путь. Теперь ваш разум "
            "заперт в цикле отрицания. Вы останетесь здесь навсегда.'\n\n"
            "Дом трансформируется вокруг него, стены покрываются огнём, но он не горит. Это вечное напоминание "
            "о его вине и отказе принять её.\n\n"
            "ПЛОХАЯ КОНЦОВКА: Вечное отрицание."
        )
        return response, 'end'

    def _handle_end_secret (self, user_input):
        """Обработка секретной концовки"""
        if "противостоять" in user_input.lower ():
            response = (
                "Алексей встаёт с кресла и оборачивается к призраку доктора Валентина, который пытается "
                "скрыться в тенях.\n\n"
                "Алексей: Я знаю правду. Это вы виновны в смерти моей семьи, а не я. Вы устроили пожар после того, "
                "как я отказался отдать сына для ваших экспериментов.\n\n"
                "Призрак доктора искажается от гнева, но с каждым словом правды становится всё более прозрачным. "
                "Алексей находит в себе силы противостоять манипуляциям, и иллюзорный мир вокруг начинает рушиться.\n\n"
                "Алексей просыпается на больничной койке. Рядом полицейский, который сообщает, что доктор Валентин "
                "арестован после расследования серии подозрительных пожаров.\n\n"
                "СЕКРЕТНАЯ КОНЦОВКА: Справедливость восторжествовала."
            )
        else:  # "помочь душам"
            response = (
                "Алексей обращается к призракам жены и ребёнка: Я любил вас и сделал всё, что мог. "
                "Теперь я должен жить дальше, но я никогда вас не забуду.\n\n"
                "Призраки улыбаются ему. Комната наполняется светом, и весь дом начинает преображаться. "
                "Стены светлеют, цветы прорастают сквозь пол. Призрак ребёнка касается руки Алексея, и тот ощущает тепло.\n\n"
                "Алексей: Прощайте. Я буду беречь память о вас.\n\n"
                "Призраки исчезают в сиянии света, обретя покой. Алексей просыпается в больнице и видит фотографию "
                "своей семьи. Он плачет, но это слезы исцеления.\n\n"
                "СЕКРЕТНАЯ КОНЦОВКА: Истинное освобождение."
            )

        return response, 'end'

    def _handle_end (self, user_input):
        """Обработка конца игры"""
        return "Игра окончена. Введите /begin чтобы начать заново.", 'end'






